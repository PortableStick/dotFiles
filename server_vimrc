filetype plugin on
" Disable intro message
set shortmess=I
set nobackup
set noswapfile
set number
set ruler
set mouse=a
set nocompatible
syntax on
set cursorline
set wrap
set pastetoggle=<F2>
set encoding=utf8
set termencoding=utf-8
set backspace=indent,eol,start
" Set Proper Tabs
set tabstop=2
set softtabstop=2
set shiftwidth=2
set smarttab
set shiftround
set expandtab
set ignorecase
set smartcase
set conceallevel=0
set relativenumber
nnoremap <F4> :set relativenumber!<CR>
set guifont=M+\ 1m\ light\ Nerd\ Font\ Complete:h19
"" Always display the status line on the bottom window only
set laststatus=1
" open a new buffer without saving current changed buffers
set hidden
" Make vim use system clipboard
set clipboard=unnamed
let mapleader = "\<Space>"
if empty(glob('~/.local/share/nvim/site/autoload'))
    silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
" Live markdown previewing
Plug 'shime/vim-livedown'
" Icons for NerdTree
Plug 'ryanoasis/vim-devicons'
Plug 'xolox/vim-misc'
Plug 'vim-airline/vim-airline'
" Easily repeat non-native commands
Plug 'tpope/vim-repeat'
" Change clipboard behavior to be more sane
Plug 'svermeulen/vim-easyclip'
" Close HTML/XML tags with <c-_> (control + underscore)
Plug 'alvan/vim-closetag'
" Insert or delete brackets, parens, quotes in pairs
Plug 'jiangmiao/auto-pairs'
" Styles for airline
Plug 'vim-airline/vim-airline-themes'
Plug 'farmergreg/vim-lastplace'
Plug 'scrooloose/nerdcommenter'
Plug 'Chiel92/vim-autoformat'
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'danilo-augusto/vim-afterglow'
" visual indentation
Plug 'thaerkh/vim-indentguides'
" transition between multi and single line code
" gS to split into multiple lines
" gJ to join into a single line
Plug 'andrewradev/splitjoin.vim'
"" fancy search and replace
Plug 'wincent/scalpel'
Plug 'jeetsukumaran/vim-buffergator'
Plug 'tpope/vim-fugitive'
Plug 'junegunn/vim-easy-align'
Plug 'cohama/agit.vim'
Plug 'airblade/vim-gitgutter'
"" Alternate bracket coloring
Plug 'eapache/rainbow_parentheses.vim'

" Syntax
Plug 'ekalinin/Dockerfile.vim'

call plug#end()
" Strip white space on save
"autocmd BufEnter * EnableStripWhitespaceOnSave

" for rainbow_parentheses
let g:rbpt_colorpairs = [
            \ ['brown',       'RoyalBlue3'],
            \ ['Darkblue',    'SeaGreen3'],
            \ ['darkgray',    'DarkOrchid3'],
            \ ['darkgreen',   'firebrick3'],
            \ ['darkcyan',    'RoyalBlue3'],
            \ ['darkred',     'SeaGreen3'],
            \ ['darkmagenta', 'DarkOrchid3'],
            \ ['brown',       'firebrick3'],
            \ ['gray',        'RoyalBlue3'],
            \ ['black',       'SeaGreen3'],
            \ ['darkmagenta', 'DarkOrchid3'],
            \ ['Darkblue',    'firebrick3'],
            \ ['darkgreen',   'RoyalBlue3'],
            \ ['darkcyan',    'SeaGreen3'],
            \ ['darkred',     'DarkOrchid3'],
            \ ['red',         'firebrick3'],
            \ ]

" load raindow_parentheses by default
let g:rbpt_loadcmd_toggle = 1

au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" or just disable the preview entirely
set completeopt-=preview

nnoremap <Leader>f :NERDTreeToggle<Enter>
" Use tab to select autocompletion option
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
" nerdtree-git
let g:NERDTreeIndicatorMapCustom = {
            \ "Modified"  : "✹",
            \ "Staged"    : "✚",
            \ "Untracked" : "✭",
            \ "Renamed"   : "➜",
            \ "Unmerged"  : "═",
            \ "Deleted"   : "✖",
            \ "Dirty"     : "✗",
            \ "Clean"     : "✔︎",
            \ 'Ignored'   : '☒',
            \ "Unknown"   : "?"
            \ }

let NERDTreeQuitOnOpen       = 1
let NERDTreeAutoDeleteBuffer = 1
let NERDTreeMinimalUI        = 1
let NERDTreeDirArrows        = 1

silent! colorscheme  afterglow
"hi CursorLine term=bold cterm=bold guibg=Grey10 ctermbg=black ctermfg=NONE
hi CursorLine cterm=underline ctermbg=NONE ctermfg=NONE
hi CursorLine gui=underline guibg=NONE guifg=NONE

"" airline
let g:airline#extensions#tabline#enabled     = 1
let g:airline#extensions#tabline#tab_nr_type = 1
let g:airline_powerline_fonts                = 1

let $FZF_DEFAULT_COMMAND = 'ag -g ""'
let g:fzf_colors =
            \ { 'fg':      ['fg', 'Normal'],
            \ 'bg':      ['bg', 'Normal'],
            \ 'hl':      ['fg', 'Comment'],
            \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
            \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
            \ 'hl+':     ['fg', 'Statement'],
            \ 'info':    ['fg', 'PreProc'],
            \ 'prompt':  ['fg', 'Conditional'],
            \ 'pointer': ['fg', 'Exception'],
            \ 'marker':  ['fg', 'Keyword'],
            \ 'spinner': ['fg', 'Label'],
            \ 'header':  ['fg', 'Comment'] }
" In Neovim, you can set up fzf window using a Vim command
let g:fzf_layout = { 'window': 'enew' }
let g:fzf_layout = { 'window': '-tabnew' }
nnoremap <silent> <leader><space> :Files<CR>
nnoremap <silent> <leader>a :Buffers<CR>

"fix some annoying stuff
nnoremap <F1> <nop>
nnoremap Q <nop>

" insert new line in normal mode
map <Enter> o<ESC>
map <S-Enter> O<ESC>
" No more escape key!!
nnoremap <C-space> a
imap <C-space> <Esc>
vmap <C-space> <Esc>

nnoremap <C-k> :bnext<CR>
nnoremap <C-j> :bprev<CR>
"nnoremap <C-w> :bd<CR>

" NCM debug
let $NVIM_PYTHON_LOG_FILE="/tmp/nvim_log"
let $NVIM_NCM_LOG_LEVEL="DEBUG"

" NERDTress File highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
    exec 'autocmd FileType nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
    exec 'autocmd FileType nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

call NERDTreeHighlightFile('jade', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('coffee', 'Red', 'none', 'red', '#151515')
call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')
call NERDTreeHighlightFile('ds_store', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('gitconfig', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('gitignore', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('bashrc', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('bashprofile', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('cs', 'Blue', 'none', 'Blue', '#151515')

noremap <F3> :Autoformat<CR>

" Vim Workspace
let g:workspace_autosave_always = 1

" disable conceal by default in JSON
let g:vim_json_syntax_conceal = 0

" Set vim-jsx to pretty colors
let g:vim_jsx_pretty_colorful_config = 1
