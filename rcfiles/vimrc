filetype plugin on
set number
set ruler
set mouse=a
set nocompatible
syntax on
set cursorline
set wrap
set pastetoggle=<F2>
set encoding=utf8
set backspace=indent,eol,start
" Set Proper Tabs
set tabstop=4
set softtabstop=4
set shiftwidth=4
set smarttab
set shiftround
set expandtab
set ignorecase
set smartcase
set relativenumber
set guifont=Source\ Code\ Pro\ Light\ for\ Powerline:h18
"" Always display the status line
set laststatus=2
"
"" Enable Elite mode, No ARRRROWWS!!!!
let g:elite_mode=1

let mapleader = "\<Space>"
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/"master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.local/share/nvim/plugged')
Plug 'farmergreg/vim-lastplace'
Plug 'artur-shaik/vim-javacomplete2', { 'for':['java'] }
Plug 'tpope/vim-sensible'
Plug 'Shougo/unite.vim'
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'wokalski/autocomplete-flow'
Plug 'dNitro/vim-pug-complete', { 'for': ['jade', 'pug'] }
Plug 'digitaltoad/vim-pug'
Plug 'jelera/vim-javascript-syntax'
" For func argument completion
Plug 'Shougo/neosnippet'
Plug 'Shougo/neosnippet-snippets'
Plug 'ternjs/tern_for_vim'
Plug 'carlitux/deoplete-ternjs', { 'do': 'npm install -g tern' }
Plug 'pangloss/vim-javascript', {'for': ['js', 'es6', 'jsx']}
Plug 'othree/yajs.vim'
Plug 'othree/es.next.syntax.vim', {'for': ['js', 'es6', 'jsx']}
Plug 'scrooloose/nerdcommenter'
Plug 'Chiel92/vim-autoformat'
Plug 'moll/vim-node', { 'for': ['js', 'es6'] }
Plug 'neomake/neomake'
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'danilo-augusto/vim-afterglow'
"" Track the engine.
Plug 'SirVer/ultisnips'
"" visual indentation
Plug 'Yggdroot/indentLine'
"" Don't interfere with tmux
Plug 'christoomey/vim-tmux-navigator'
"" Snippets are separated from the engine. Add this if you want them:
Plug 'honza/vim-snippets'
Plug 'mustache/vim-mustache-handlebars', { 'for': ['hbls', 'handlbars', 'html', 'js'] }
Plug 'mattn/emmet-vim'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'jeetsukumaran/vim-buffergator'
Plug 'honza/vim-snippets'
Plug 'Townk/vim-autoclose'
Plug 'jtratner/vim-flavored-markdown'
Plug 'reedes/vim-pencil'
""Typescript Plugins
Plug 'Shougo/vimproc.vim', { 'do': 'make' }
Plug 'Quramy/tsuquyomi', { 'do': 'npm install -g typescript' }
Plug 'mhartington/deoplete-typescript'
"Plug 'majutsushi/tagbar'
Plug 'fatih/vim-go', { 'for': 'go' }
"Plug 'maralla/completor.vim'
Plug 'zchee/deoplete-go', { 'for': 'go' }
Plug 'terryma/vim-multiple-cursors'
Plug 'jodosha/vim-godebug', { 'for': 'go' }
Plug 'mxw/vim-jsx', { 'for': ['jsx', 'es6', 'js'] }
Plug 'tpope/vim-surround'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'tpope/vim-fugitive'
Plug 'junegunn/vim-easy-align'
Plug 'ervandew/supertab'
call plug#end()

" Vim-UtilSnips Configuration
" Trigger configuration. Do not use <tab> if you use https://github.com"/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger       = "<tab>"
let g:UltiSnipsJumpForwardTrigger  = "<c-b>"
let g:UltiSnipsJumpBackwardTrigger = "<c-z>"
let g:UltiSnipsEditSplit           = "vertical" " If you want :UltiSnipsEdit to "split your window.

autocmd BufRead,BufNewFile *.md setlocal spell
set complete+=kspell

" Use deoplete.
let  g:javascript_plugin_jsdoc                       = 1
let  g:deoplete#enable_at_startup                    = 1
let  g:deoplete#enable_ignore_case                   = 1
let  g:deoplete#enable_smart_case                    = 1
let  g:deoplete#enable_camel_case                    = 1
let  g:deoplete#enable_refresh_always                = 1
let  g:deoplete#max_abbr_width                       = 0
let  g:deoplete#max_menu_width                       = 0
let  g:deoplete#omni#input_patterns                  = get(g:,'deoplete#omni#input_patterns',{})
call deoplete#custom#set('_', 'matchers', ['matcher_full_fuzzy'])
"
let  g:tern_request_timeout                          = 1" Neocomplete Settings
let  g:acp_enableAtStartup                           = 0
let  g:neocomplete#enable_at_startup                 = 1
let  g:neocomplete#enable_smart_case                 = 1
let  g:neocomplete#sources#syntax#min_keyword_length = 3
let  g:tern_request_timeout                          = 6000
let  g:tern#command                                  = ["tern"]
let  g:tern#arguments                                = ["--persistent"]
let  g:deoplete#sources#tss#javascript_support       = 1
let  g:tsuquyomi_javascript_support                  = 1
let  g:tsuquyomi_auto_open                           = 1
let  g:tsuquyomi_disable_quickfix                    = 1

nnoremap <Leader>f :NERDTreeToggle<Enter>
" nerdtree-git
let g:NERDTreeIndicatorMapCustom = {
            \ "Modified"  : "✹",
            \ "Staged"    : "✚",
            \ "Untracked" : "✭",
            \ "Renamed"   : "➜",
            \ "Unmerged"  : "═",
            \ "Deleted"   : "✖",
            \ "Dirty"     : "✗",
            \ "Clean"     : "✔︎",
            \ 'Ignored'   : '☒',
            \ "Unknown"   : "?"
            \ }

let NERDTreeQuitOnOpen       = 1
let NERDTreeAutoDeleteBuffer = 1
let NERDTreeMinimalUI        = 1
let NERDTreeDirArrows        = 1

map <c-f> :Autoformat<cr>
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | "endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
map <F9> :set wrap!<cr>
"
"" Neomake settings
autocmd! BufWritePost * Neomake
let g:neomake_elixir_enabled_makers = ['mix', 'credo', 'dogma']
"" Markdown Syntax Support
augroup markdown
    au!
    au BufNewFile,BufRead *.md,*.markdown setlocal filetype=ghmarkdown
augroup END

"" Settings for Writting
let g:pencil#wrapModeDefault = 'soft'   " default is 'hard'
let g:languagetool_jar       = '/opt/languagetool/"languagetool-commandline.jar'
"
"" Vim-pencil Configuration
augroup pencil
    autocmd!
    autocmd FileType markdown,mkd call pencil#init()
    autocmd FileType text         call pencil#init()
augroup END

" Neocomplete Settings
let g:acp_enableAtStartup                           = 0
let g:neocomplete#enable_at_startup                 = 1
let g:neocomplete#enable_smart_case                 = 1
let g:neocomplete#sources#syntax#min_keyword_length = 3

let g:fzf_layout = { 'down': '~40%' }

"" In Neovim, you can set up fzf window using a Vim command
let     g:fzf_layout = { 'window': 'enew' }
let     g:fzf_layout = { 'window': '-tabnew' }
"
"" Customize fzf colors to match your color scheme
silent! colorscheme  afterglow
autocmd FileType     java setlocal omnifunc = javacomplete#Complete
"" Javascomplete Bindings
nmap    <leader>jI   <Plug>(JavaComplete-Imports-AddMissing)
nmap    <leader>jR   <Plug>(JavaComplete-Imports-RemoveUnused)
nmap    <leader>ji   <Plug>(JavaComplete-Imports-AddSmart)
nmap    <leader>jii  <Plug>(JavaComplete-Imports-Add)

imap <C-j>I  <Plug>(JavaComplete-Imports-AddMissing)
imap <C-j>R  <Plug>(JavaComplete-Imports-RemoveUnused)
imap <C-j>i  <Plug>(JavaComplete-Imports-AddSmart)
imap <C-j>ii <Plug>(JavaComplete-Imports-Add)

nmap <leader>jM <Plug>(JavaComplete-Generate-AbstractMethods)

imap <C-j>jM <Plug>(JavaComplete-Generate-AbstractMethods)

nmap <leader>jA  <Plug>(JavaComplete-Generate-Accessors)
nmap <leader>js  <Plug>(JavaComplete-Generate-AccessorSetter)
nmap <leader>jg  <Plug>(JavaComplete-Generate-AccessorGetter)
nmap <leader>ja  <Plug>(JavaComplete-Generate-AccessorSetterGetter)
nmap <leader>jts <Plug>(JavaComplete-Generate-ToString)
nmap <leader>jeq <Plug>(JavaComplete-Generate-EqualsAndHashCode)
nmap <leader>jc  <Plug>(JavaComplete-Generate-Constructor)
nmap <leader>jcc <Plug>(JavaComplete-Generate-DefaultConstructor)

nmap <C-j>s <Plug>(JavaComplete-Generate-AccessorSetter)
imap <C-j>g <Plug>(JavaComplete-Generate-AccessorGetter)
imap <C-j>a <Plug>(JavaComplete-Generate-AccessorSetterGetter)

vmap <leader>js <Plug>(JavaComplete-Generate-AccessorSetter)
vmap <leader>jg <Plug>(JavaComplete-Generate-AccessorGetter)
vmap <leader>ja <Plug>(JavaComplete-Generate-AccessorSetterGetter)

nmap <silent> <buffer> <leader>jn <Plug>("JavaComplete-Generate-NewClass)
nmap <silent> <buffer> <leader>jN <Plug>("JavaComplete-Generate-ClassInFile)

""Tagbar Bindings
"
nmap <F8> :TagbarToggle<CR>
" If you prefer the Omni-Completion tip window to close when a "selection is
"" made, these lines close it on movement in insert mode or when leaving
"" insert mode
autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
autocmd InsertLeave * if pumvisible() == 0|pclose|endif
let g:go_fmt_command = "goimports"
"

"" airline
let g:airline#extensions#tabline#enabled     = 1
let g:airline#extensions#tabline#tab_nr_type = 1
let g:airline_powerline_fonts                = 1
set laststatus=2
"
let g:indentLine_noConcealCursor = 1
let g:indentLine_color_term      = 239
let g:indentLine_char            = '|'
"
"" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
"
"" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
"
"" require jsx for files with js plugin
let g:jsx_ext_required = 0
