filetype plugin indent on
set nolist
" Disable intro message
set shortmess=I
set nobackup
set noswapfile
set number
set ruler
set mouse=a
set nocompatible
syntax on
set cursorline
set wrap
set pastetoggle=<F2>
set encoding=utf8
set termencoding=utf-8
set backspace=indent,eol,start
set smarttab
set shiftround
set expandtab
set ignorecase
set smartcase
set relativenumber
set autoread

nnoremap <F4> :set relativenumber!<CR>
set guifont=Ubuntu\ Mono\ derivative\ Powerline:h19
" Always display the status line on the bottom window only
set laststatus=1
" open a new buffer without saving current changed buffers
set hidden
" Make vim use system clipboard
set clipboard=unnamed
let mapleader = "\<Space>"
if empty(glob('~/.local/share/nvim/site/autoload'))
  silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Trigger updates
au FocusGained,BufEnter * :checktime
au CursorHold,CursorHoldI * checktime

call plug#begin('~/.vim/plugged')
Plug 'Valloric/YouCompleteMe', { 'do': './install.py --tern-completer' }
" FocusGained and FocusLost autocommand events are not working in terminal vim. 
" This plugin restores them when using vim inside Tmux.
Plug 'tmux-plugins/vim-tmux-focus-events'
" Changes Vim working directory to project root (identified by presence of known directory or file).
" Plug 'airblade/vim-rooter'
" Live markdown previewing
Plug 'shime/vim-livedown'
" Icons for NerdTree
Plug 'ryanoasis/vim-devicons'
Plug 'xolox/vim-easytags'
Plug 'xolox/vim-misc'
Plug 'majutsushi/tagbar'
Plug 'lervag/vimtex'
Plug 'vim-airline/vim-airline'
" Easily repeat non-native commands
Plug 'tpope/vim-repeat'
" Change clipboard behavior to be more sane
Plug 'svermeulen/vim-easyclip'
" Close HTML/XML tags with <c-_> (control + underscore)
Plug 'alvan/vim-closetag'
" Insert or delete brackets, parens, quotes in pairs
Plug 'jiangmiao/auto-pairs'
" Styles for airline
Plug 'vim-airline/vim-airline-themes'
"Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
" Autocomplete
Plug 'dNitro/vim-pug-complete', { 'for': ['jade', 'pug'] }
Plug 'digitaltoad/vim-pug'
" Real time interpreter
" start with :Codi
Plug 'metakirby5/codi.vim'
Plug 'farmergreg/vim-lastplace'
" Completion for function parameters
Plug 'othree/jspc.vim', { 'for': ['javascript', 'javascript.jsx'] }
Plug 'scrooloose/nerdcommenter'
" Automatically formats using globally available fixers
" :Autoformat or <f3>
Plug 'Chiel92/vim-autoformat'
Plug 'moll/vim-node'
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'danilo-augusto/vim-afterglow'
" visual indentation
Plug 'Yggdroot/indentLine'
Plug 'mattn/emmet-vim'
" transition between multi and single line code
" gS to split into multiple lines
" gJ to join into a single line
Plug 'andrewradev/splitjoin.vim'
" Typescript Plugins
Plug 'Shougo/vimproc.vim', { 'do': 'make' }
Plug 'Quramy/tsuquyomi', { 'do': 'npm install -g typescript' }
Plug 'leafgarland/typescript-vim'
" Go
Plug 'fatih/vim-go', { 'for': 'go' }
Plug 'jodosha/vim-godebug', { 'for': 'go' }
Plug 'tpope/vim-surround'
" Completion engine
" Fill in jsdoc with :JsDoc
Plug 'heavenshell/vim-jsdoc'
Plug 'jeetsukumaran/vim-buffergator'
" Git wrapper
" :Gdiff
Plug 'tpope/vim-fugitive'
" Integrates vim-fugitive with hub
Plug 'tpope/vim-rhubarb'
" visually select some text and begin
" aligning with <ga>
Plug 'junegunn/vim-easy-align'
" Linter/fixer
Plug 'w0rp/ale'
" Very nice git log viewer
" :Agit
Plug 'cohama/agit.vim'
" Show git changes in the gutter
" Plug 'airblade/vim-gitgutter'
" Alternate bracket coloring
Plug 'eapache/rainbow_parentheses.vim'

" Clojure stuff
" Connect to lein repl
Plug 'tpope/vim-fireplace'
Plug 'guns/vim-sexp'
Plug 'tpope/vim-sexp-mappings-for-regular-people'

" Syntax
Plug 'posva/vim-vue'
Plug 'ekalinin/Dockerfile.vim'
Plug 'Quramy/vim-js-pretty-template'
Plug 'nikvdp/ejs-syntax'
Plug 'mustache/vim-mustache-handlebars', { 'for': ['hbls', 'handlbars', 'html', 'js'] }
Plug 'pangloss/vim-javascript'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'othree/javascript-libraries-syntax.vim'
Plug 'dart-lang/dart-vim-plugin'
Plug 'jparise/vim-graphql'

call plug#end()

" Disable JSON conceallevel
augroup jsonConceal
  au!
  au FileType json set conceallevel=0
augroup end

" for rainbow_parentheses
let g:rbpt_colorpairs = [
      \ ['brown',       'RoyalBlue3'],
      \ ['Darkblue',    'SeaGreen3'],
      \ ['darkgray',    'DarkOrchid3'],
      \ ['darkgreen',   'firebrick3'],
      \ ['darkcyan',    'RoyalBlue3'],
      \ ['darkred',     'SeaGreen3'],
      \ ['darkmagenta', 'DarkOrchid3'],
      \ ['brown',       'firebrick3'],
      \ ['gray',        'RoyalBlue3'],
      \ ['black',       'SeaGreen3'],
      \ ['darkmagenta', 'DarkOrchid3'],
      \ ['Darkblue',    'firebrick3'],
      \ ['darkgreen',   'RoyalBlue3'],
      \ ['darkcyan',    'SeaGreen3'],
      \ ['darkred',     'DarkOrchid3'],
      \ ['red',         'firebrick3'],
      \ ]

" load raindow_parentheses by default
let g:rbpt_loadcmd_toggle = 1

au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

let g:UltiSnipsExpandTrigger="<C-j>"

nnoremap <Leader>f :NERDTreeToggle<Enter>
" Use tab to select autocompletion option
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
" nerdtree-git
let g:NERDTreeIndicatorMapCustom = {
      \ "Modified"  : "✹",
      \ "Staged"    : "✚",
      \ "Untracked" : "✭",
      \ "Renamed"   : "➜",
      \ "Unmerged"  : "═",
      \ "Deleted"   : "✖",
      \ "Dirty"     : "✗",
      \ "Clean"     : "✔︎",
      \ 'Ignored'   : '☒',
      \ "Unknown"   : "?"
      \ }

let NERDTreeQuitOnOpen       = 1
let NERDTreeAutoDeleteBuffer = 1
let NERDTreeMinimalUI        = 1
let NERDTreeDirArrows        = 1

silent! colorscheme  afterglow
" hi CursorLine term=bold cterm=bold guibg=Grey10 ctermbg=black ctermfg=NONE
hi CursorLine cterm=underline ctermbg=NONE ctermfg=NONE
hi CursorLine gui=underline guibg=NONE guifg=NONE

" airline
let g:airline#extensions#tabline#enabled     = 1
let g:airline#extensions#tabline#tab_nr_type = 1
let g:airline_powerline_fonts                = 1

let g:airline_theme='distinguished'

set omnifunc=syntaxcomplete#Complete
augroup omnifuncs
  autocmd!
  autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
  autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
  autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
  autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
  autocmd FileType java setlocal omnifunc=javacomplete#Complete
augroup end

let $FZF_DEFAULT_COMMAND = 'ag -g "'
let g:fzf_colors =
      \ { 'fg':      ['fg', 'Normal'],
      \ 'bg':      ['bg', 'Normal'],
      \ 'hl':      ['fg', 'Comment'],
      \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
      \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
      \ 'hl+':     ['fg', 'Statement'],
      \ 'info':    ['fg', 'PreProc'],
      \ 'prompt':  ['fg', 'Conditional'],
      \ 'pointer': ['fg', 'Exception'],
      \ 'marker':  ['fg', 'Keyword'],
      \ 'spinner': ['fg', 'Label'],
      \ 'header':  ['fg', 'Comment'] }
nnoremap <silent> <leader><space> :Files<CR>
nnoremap <silent> <leader>a :Buffers<CR>

" fix some annoying stuff
nnoremap <F1> <nop>
nnoremap Q <nop>

" insert new line in normal mode
map <Enter> o<ESC>
map <S-Enter> O<ESC>
" No more escape key!!
nnoremap <C-space> a
imap <C-space> <Esc>
vmap <C-space> <Esc>

nnoremap <C-k> :bnext<CR>
nnoremap <C-j> :bprev<CR>
" nnoremap <C-w> :bd<CR>
" require jsx for files with js plugin
let g:jsx_ext_required = 0
let g:ale_change_sign_column_color = 1
let g:ale_sign_column_always = 1
let g:ale_change_sign_column_color  = 0
inoremap <C-e> <C-o>$
inoremap <C-f> <C-o>^

nmap <F8> :TagbarToggle<CR>

" NCM debug
let $NVIM_PYTHON_LOG_FILE="/tmp/nvim_log"
let $NVIM_NCM_LOG_LEVEL="DEBUG"

" NERDTress File highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
  exec 'autocmd FileType nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
  exec 'autocmd FileType nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction

call NERDTreeHighlightFile('jade', 'green', 'none', 'green', '#151515')
call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('html', 'yellow', 'none', 'yellow', '#151515')
call NERDTreeHighlightFile('styl', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
call NERDTreeHighlightFile('coffee', 'Red', 'none', 'red', '#151515')
call NERDTreeHighlightFile('js', 'Red', 'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('php', 'Magenta', 'none', '#ff00ff', '#151515')
call NERDTreeHighlightFile('ds_store', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('gitconfig', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('gitignore', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('bashrc', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('bashprofile', 'Gray', 'none', '#686868', '#151515')
call NERDTreeHighlightFile('cs', 'Blue', 'none', 'Blue', '#151515')

noremap <F3> :Autoformat<CR>

" Key command to reload Clojure file in REPL
au Filetype clojure nmap <c-c><c-c> :Require<cr>
au Filetype clojure let g:AutoPairs = {'(':')', '[':']', '{':'}','"':'"', '`':'`'}
nnoremap <leader>s :ToggleWorkspace<CR>
nnoremap ; :

" Live markdown preview
nmap gm :LivedownToggle<CR>
" should markdown preview get shown automatically upon opening markdown buffer
let g:livedown_autorun = 0

" should the browser window pop-up upon previewing
let g:livedown_open = 1

" the port on which Livedown server will run
let g:livedown_port = 1337

" the browser to use
let g:livedown_browser = "firefox"

" disable conceal by default in JSON
" let g:vim_json_syntax_conceal = 0

" Set vim-jsx to pretty colors
let g:vim_jsx_pretty_colorful_config = 1

" filenames like *.xml, *.html, *.xhtml, ...
" These are the file extensions where this plugin is enabled.
let g:closetag_filenames = '*.html,*.xhtml,*.phtml'

" filenames like *.xml, *.xhtml, ...
" This will make the list of non-closing tags self-closing in the specified files.
let g:closetag_xhtml_filenames = '*.xhtml,*.jsx,*.js'

" integer value [0|1]
" This will make the list of non-closing tags case-sensitive (e.g. `<Link>` will be closed while `<link>` won't.)
let g:closetag_emptyTags_caseSensitive = 1

" Shortcut for closing tags, default is '>'
let g:closetag_shortcut = '>'

" Add > at current position without closing the current tag, default is ''
let g:closetag_close_shortcut = '<leader>>'

" vim-easy-align mapping
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" Stop auto-pairs from moving to next line
let g:AutoPairsMultilineClose = 0

" Disable vidual indentation for JSON files (to keep quotes)
let g:indentLine_fileTypeExclude = ['json', 'markdown']
" Start autocompletion after 4 chars
let g:ycm_min_num_of_chars_for_completion = 4
let g:ycm_min_num_identifier_candidate_chars = 4
let g:ycm_enable_diagnostic_highlighting = 0

" Don't show YCM's preview window [ I find it really annoying ]
set completeopt-=preview
let g:ycm_add_preview_to_completeopt = 0
